// just saying we need to parse the whole line as a valid input
repl_input_line = { SOI ~ repl_input ~ EOI }

// possible "complete" user inputs, for the REPL
repl_input = 
    { quit
    | help
    | mem
    | gc
    | statement
    | expr
    }

quit = { "quit" | "exit" }

help = { "help" }

mem = { "mem" | "memory" }

gc = { "gc" }

statement = 
    { var_defn_stmt
    | block_stmt
    | return_stmt
    }

block_stmt = { "{" ~ (statement)* ~ "}" }

return_stmt = { "return" ~ expr ~ ";" }

var_defn_stmt = { id ~ "=" ~ expr ~ ";" }

expr = { comp_expr }

comp_expr =
    { add_expr ~ ( comp_op ~ add_expr )?
    }

add_expr = { mul_expr ~ ( add_op ~ mul_expr )* }
mul_expr = { unary_expr ~ ( mul_op ~ unary_expr )* }

// note this is recursive because that turns out to be more convenient
// for parsing, while the add_expr / mul_expr are in list form;
// this also makes sure -10.7 gets parsed as a number, not -(10.7)
unary_expr =
    { base_expr
    | unary_op ~ unary_expr
    }

base_expr = { paren_expr | function_call | float | float_list | bool | bool_list | function_definition | id }

function_definition =
    // we can have \x => x*12, or () => x*12, or (\x, \y, \z,) => x+y+z, or etc.
    { escaped_id ~ "=>" ~ function_body
    | "(" ~ ")" ~ "=>" ~ function_body
    | "(" ~ escaped_id ~ ( "," ~ escaped_id )* ~ (",")? ~ ")" ~ "=>" ~ function_body
    }

function_body = 
    { expr
    | block_stmt
    }

escaped_id = @{ "\\" ~ id }

function_call =
    { id ~ "(" ~ ")"
    | id ~ "(" ~ expr ~ ( "," ~ expr )* ~ ( "," )? ~ ")"
    }

paren_expr = { "(" ~ expr ~ ")" }

add_op = { PLUS | MINUS }
mul_op = { TIMES | DIVIDE }
unary_op = { NEG }

comp_op = { GEQ | GT | LEQ | LT | EQ | NEQ }

PLUS = { "+" }
MINUS = { "-" }
TIMES = { "*" }
DIVIDE = { "/" }
NEG = { "-" }

GEQ = { ">=" }
GT = { ">" }
LEQ = { "<=" }
LT = { "<" }
EQ = { "==" }
NEQ = { "!=" }

id = @{ ASCII_ALPHA ~ ( ASCII_ALPHA | ASCII_DIGIT )* }

float_list =
    { "[" ~ float ~ ( "," ~ float )* ~ (",")? ~ "]"
    }


float = @{
    ( "-" )? ~ 
        // the grammar for a nonnegative float
        ( pos_int ~ "." ~ ( ASCII_DIGIT )*
        | "." ~ ( ASCII_DIGIT )*
        | pos_int ~ "."
        | pos_int
        )
}

// TODO: currently [] can't parse as an "untyped empty list" which it probably should?
// could just disallow empty lists, I honestly don't see the use for them at the moment
bool_list =
    { "[" ~ bool ~ ( "," ~ bool )* ~ (",")? ~ "]"
    }

bool = { TRUE | FALSE }

TRUE = { "true" }
FALSE = { "false" }

// helper formula; no leading zeros in ints, but 0 itself is an int
pos_int = @
    { "0"
    | ( ASCII_NONZERO_DIGIT ) ~ ( ASCII_DIGIT )*
    }

// Pest magic rule, this discards all whitespace when tokenizing
WHITESPACE = _{ WHITE_SPACE }